'''
    - 시나리오1 : Todo(할일) List 개발
        - 조건1 : 할일 내용과 할일 상태 여러번 저장
        - 조건2 : 저장 , 할일 전체 출력 , 상태 수정 , 할일 삭제
        - 조건3 : 출력 예시
            순번 할일 내용   할일 상태
            1   파이썬 공부     X
            2   운동 하기       O
            3
        - 조건4 : 클래스/객체 사용 안함

    - 요구 사항 의 자료/값 와 이벤트/함수
    자료 : 할일 내용, 할일 상태
    행위 : 저장, 전체 출력, 수정, 삭제
'''

# [1] 딕셔너리와 리스트를 이용한 메모리 설계
할일목록 = [
{'할일내용' : '파이썬 공부' , '할일상태' : 'X'} ,
{'할일내용' : '운동 하기' , '할일상태' : 'O'} ,
{'할일내용' : '집 가기' , '할일상태' : 'X'}
] # 각 딕셔너리 3개를 하나의 리스트 에서 관리

# [2] 각 기능 들의 함수
def 할일저장(할일내용,할일상태):
    # 매개 변수로 부터 전달 받은 2개의 값을 이용한 딕셔너리 생성
    dic = {'할일내용' : 할일내용 , '할일상태' : 할일상태}
    # 생성 한 딕셔너리를 리스트에 저장
    할일목록.append(dic)

def 할일전체출력():
    순번 = 0
    for 할일 in 할일목록 :
        순번 += 1
        print(f'{순번} \t {할일['할일내용']} \t {할일['할일상태']}')

# [3] 함수들을 실행 하는 코드 (실행문)
while True : # 무한 루프 ( 종료 조건 )
    choose = input('1.저장 2.전체출력 5.종료')
    if choose == '5' :
        break
    if choose == '1' :
# 입력
        할일내용 = input('할일내용 : ')
        할일상태 = '미완료' # 할 일 상태는 기본값은 '미완료'
# 저장 함수 호출
    할일저장(할일내용,할일상태)
    if choose == '2' :
        할일전체출력()

# [1] 객체를 이용한 메모리 설계
class 할일 :
    def __init__(self,할일내용,할일상태):
        self.할일내용 = 할일내용
        self.할일상태 = 할일상태

    def 할일저장(self):
        할일목록.append(self)

    def 출력(self,순번):
        print(f'{순번} \t {self.할일내용} \t {self.할일상태}')

할일목록 = [
할일('파이썬 공부','X'),
할일('운동 하기','O'),
할일('집 가기','X')
] # 각 객체 3개를 하나의 리스트 에서 관리

# [2]
while True :
    choose = input('1.저장 2.전체출력 5.종료')
    if choose == '5':
        break
    if choose == '1':
        할일내용 = input('할일내용 : ')
        할일상태 = '미완료'
        task = 할일(할일내용,할일상태)
        task.할일저장()
    if choose == '2' :
        순번 = 0
        for 할일 in 할일목록 :
            순번 += 1
            할일.출력(순번)