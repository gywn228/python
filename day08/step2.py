# [7] 함수 안에서 선언 된 변수의 사용 범위 # 지역 변수
var1 = 1                    # 함수 밖에서 선언 된 변수 (전역 변수)
def test1( var1 ) :         # 함수 인자값 저장 하는 변수 (매개 변수 , 지역 변수)
    var1 = var1 + 1         # 함수 안에서 선언 된 변수 (지역 변수)
test1(var1)
print(var1) # 확인 # 1

# 1. return 반환             # 전역 변수와 지역 변수가 이름이 동일 하면 함수 내 에서는 지역 변수가 우선 이다
# 왜? 지역 변수를 사용 하는 이유 > 즉 함수를 사용 하는 이유 : 함수는 정의 하고 함수 내 코드 들을 실행시 에만 메모리 할당/부여 , 종료 되면 다 사라짐
# 메모리(물리 적인 저장 장치)/자원 = 자원을 아껴 쓰자 -> 함수는 실행 할 때만 함수 내 코드와 메모리 할당 하고 함수를 종료 하거나 안쓰면 메모리 할당 안함
# 즉] 사용시 에만 메모리(자원) 사용 개념
def test2(var1):
    var1 = var1 + 1         # 지역 변수
    return var1             # 지역 변수의 자료를 반환/리턴 # 함수 종료 되면 함수 내 메모리/변수/자료 는 다 사라 진다 # 필요한 자료는 복귀/반환
print(test2(var1)) # 확인 # 2

# 2. 전역 변수를 함수 안으로 불러 내기 , global 키워드
def test3():
    global var1            # global 전역 변수 명 # 함수 밖에 있즌 전역 변수를 함수 안으로 가져 왔다
    var1 = var1 +2
test3()
print(var1)     # 확인 # 3

# [실습1] : 키보드로 부터 입력 받은 2개의 정수를 인자값 으로 전달 하면 두 정수를 제곱 계산 하여 결과를 반환 하는 함수 만들기
정수1 = int(input('(1)정수 : ')) # input() # 키보드로 부터 입력 받는 기능 처리 하는 함수 # 매개 변수 : 출력 할 자료 # 반환값 : 키보드로 부터 입력 받은(엔터 기준) 문자열
# int() # 자료를 정수 타입으로 변환 처리 함수 # 매개 변수 : 변환 할 자료 # 반환값 : 정수로 변환 된 자료
정수2 = int(input('(2)정수 : ')) # input 이 반환한 문자열 을 int가 변환 해서 반환된 정수를 '정수2'라는 변수에 대입

# 함수 정의/만들기
def square(x,y): # 2개의 인자 값을 받아 2개의 매개 변수에 저장 하는 함수 정의/만들기
    result = x ** y # 계산 또는 실행문 , 함수 실행
    return result # 계산 된 결과 # 리턴을 안하면 함수 내 모든 자료들 사라 진다 왜? 지역 변수의 특징
# 함수 호출/사용
a = square(정수1 , 정수2) # 인자 값으로 입력 받은 값 정수 ,(쉼표) 구분 해서 전달
# 함수가 종료 되면서 반환 된 제곱 결과를 반환 받아서 a변수에 대입
print(a)
# [실습2] : [1,2,3,4] 자료 4개를 가지는 리스트 자료 1개를 인자값 으로 전달 하여 매개 변수의 총 합계를 계산 하여 반환 하는 함수 만들기